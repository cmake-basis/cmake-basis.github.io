.. meta::
    :description: How to document software following BASIS, a build system and
                  software implementation standard.


====================
Documenting Software
====================


.. note:: This how-to guide is yet not complete.

BASIS supports two well-known and established documentation generation tools:
Doxygen_ and Sphinx_.

Documentation Quick Start
=========================

When you use the ``basisproject`` tool to generate a project as described in
:doc:`/howto/create-and-modify-project`, you will have a tree with a ``/doc``
directory preconfigured to generate a starter documentation website and PDF
just like the BASIS website. 

Here is how to create a new project that supports documentation:

.. code-block:: bash
    
    basisproject --name docProject --description "This is a BASIS project." --full
    
We will assume that you ran this command in your ``~/`` 
directory for simplicity in the steps below.

Writing Documentation
---------------------

Now you can simply open the ``~/docProject/doc/*.rst`` files and start editing 
the existing  reStructuredText_ files to create your Sphinx documentation. 

You can also update your
`doxygen mainpage <http://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdmainpage>`__
by opening ``~/docProject/doc/apidoc/apidoc.dox``. 

We also suggest taking a look at the ``/doc`` folder of the BASIS source code 
itself for more examples of how to write documentation.

Generating Documentation
------------------------

Once you have the project ready the docs can be generated.

.. code-block:: bash
    
    mkdir ~/docProject-build
    cd ~/docProject-build
    cmake ../docProject -DBUILD_DOCUMENTATION=ON -DCMAKE_INSTALL_PREFIX=~/docProject-install
    make doc
    make install


The web documentation will be in ``~/docProject-install/doc/html/index.html``,
and the PDF docs will be in ``~/docProject-install/doc/docProject_Software_Manual.pdf``.

Serving Website Locally
-----------------------

Note that simply opening the documentation will not render all pages
correctly due to the use of the iframe HTML tag to embed the Doxygen
generated API docs and the security settings built into modern browsers.
Instead, display your docs via a server, for example, using Python by
running the following command in the root directory of the (installed)
documentation.

Python 2:

.. code-block:: python

  python -m SimpleHTTPServer

Python 3:

.. code-block:: python

  python -m http.server

Then go to `localhost:8000 <http://localhost:8000>`__ to view the pages.


Doxygen Documentation
=====================

Language Support
----------------

Since version 1.8.0, Doxygen_ can natively generate documentation from 

- C/C++
- Java
- Python
- Tcl
- Fortran. 

The markup language used to format documentation
comments was originally a set of commands inherited from Javadoc.
Recently Doxygen also adopted Markdown_ and elements from `Markdown Extra`_.

Doxygen Filters
---------------

To extend the reportoire of programming languages processed by Doxygen, so-called
custom Doxygen filters can be provided which transform any source code into
the syntax of one of the languages well understood by Doxygen. The target language
used is commonly C/C++ as this is the language best understood by Doxygen.

BASIS includes Doxygen filters for:

- CMake
- Bash
- Perl
- MATLAB
- Python

Generating Doxygen
------------------

The :apidoc:`basis_add_doxygen_doc` CMake command can be used to create your own custom doxygen documentation.


Sphinx Documentation
====================

BASIS makes use of Sphinx_ for the alternative documentation
generation from Python source code and corresponding doc strings. The markup
language used by Sphinx is reStructuredText_ (reST). 

Sphinx Documentation has the advantages of being able to be produced in many
different formats, and it can be used inline in Python code, and producing
documentation in a much more usable layout. However, it cannot generate 
documentaiton from inline code for C++ in the way that doxygen can. 

Output Formats
--------------

Sphinx and restructured text allow documentation to be generated in a wide
number of useful formats, including:

- HTML
- LaTeX
- man pages
- Docutils

These can be used to produce:

- software manual
- developer's guide
- tutorial slides,
- project web site 

This is accomplished by providing text files marked up using reST which are
then processed by Sphinx to generate documentation in the desired output format.

BASIS includes two Sphinx extensions breathe_ and doxylink_ which are included with BASIS
can be used to include, respectively, link to the the documentation generated
by Doxygen from the documentation generated by Sphinx. The latter only for the
HTML output, which, however, is the most commonly used and preferred output
format. Given that the project web site and manuals are generated by Sphinx and
only the more advanced reference documentation is generated by Doxygen, this
one directional linking of documentation pages is sufficient for most use cases.
Currently BASIS uses doxylink because it is able to work with more complete
and better organized output than breathe can handle as of the time of writing.

Themes
------

A number of Sphinx themes are provided with BASIS, and the recommended default theme 
is readable-wide that is used by the BASIS website.

- readable-wide 
- readable
- agogo         
- default       
- haiku         
- pyramid       
- sphinxdoc
- basic         
- epub          
- nature        
- readable      
- scrolls       
- traditional

You can also use your own theme from the web or include it yourself by simply providing
a path to the theme using the HTML_THEME parameter of :apidoc:`basis_add_doc()` and 
:apidoc:`basis_add_sphinx_doc()`.

Markdown
========

`Markdown <http://daringfireball.net/projects/markdown/>`_, 
`GitHub flavored Markdown <https://help.github.com/articles/github-flavored-markdown>`_ and 
Markdown Extra can be used for the root package documentation files such as the 
AUTHORS.md, README.md, INSTALL.md, and COPYING.md files. Many online hosting platforms 
for the distribution of open source software such as SourceForge and GitHub render markdown
on the project page with the marked up formatting.

.. note:: Not all of these documentation tools are supported for all languages.


Creating Documentation
======================

The best example for creating documenation is the BASIS documentation itself,
which can be found in the ``doc/apidoc`` folder. The most important function
for generating documentation is :apidoc:`basis_add_doc()`, which can handle
the parameters of the related :apidoc:`basis_add_sphinx_doc()` and
:apidoc:`basis_add_doxygen_doc()` commands.

.. only:: html
  
  Here is the code that generates the integrated Sphinx and Doxygen Documentation:
  
  .. literalinclude:: ../CMakeLists.txt


Software Manual
===============

Introduces users to software tools and guides them through example application.


Developer's Guide
=================

Describes implementation details.


API Documentation
=================

Documentation generated from source code and in-source comments, integrated with default template.


Software Web Site
=================

A web site can be created using the documentation generation tool Sphinx_.
The main input to this tool are text files written in the lightweight markup language
reStructuredText_. A default theme for use at SBIA has been created which is part
of BASIS. This theme together with the text files that define the content and
structure of the site, the HTML pages of the software web site can be generated
by ``sphinx-build``. The CMake function :apidoc:`basis_add_doc()` provides an easy way
to add such web site target to the build configuration. For example, the
template ``doc/CMakeLists.txt`` file contains the following section:

.. code-block:: cmake

    # ----------------------------------------------------------------------------
    # web site (optional)
    if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/site/index.rst")
      basis_add_doc (
        site
        GENERATOR     Sphinx
        BUILDER       html dirhtml pdf man
        MAN_SECTION   7
        HTML_THEME    readable-wide
        HTML_SIDEBARS globaltoc
        RELLINKS      installation documentation publications people
        COPYRIGHT     "<year> University of Pennsylvania"
        AUTHOR        "<author>"
      )
    endif ()

where <year> and <author> should be replaced by the proper values. This is usually done
by the :doc:`basisproject <create-and-modify-project>` command-line tool upon creation
of a new project.

This CMake code adds a build target named ``site`` which invokes ``sphinx-build``
with the proper default configuration to generate a web site from the reST
source files with file name extension ``.rst`` found in the ``site/`` subdirectory.
The source file of the main page, the so-called master document, of the web site
must be named ``index.rst``. The main pages which are linked in the top
navigation bar are named using the ``RELLINKS`` option of :apidoc:`basis_add_sphinx_doc()`,
the CMake function which implements the addition of a Sphinx documentation target.
The corresponding source files must be named after these links. For example, given
above CMake code, the reStructuredText source of the page with the download
instructions has to be saved in the file ``site/download.rst``.

See the :ref:`corresponding section <Build>` of the :doc:`../install`
guide for details on how to generate the HTML pages from the reST source
files given the specification of a Sphinx documentation build target such as the
``site`` target defined by above template CMake code.


.. _basis_add_doc(): https://cmake-basis.github.io/apidoc/latest/group__CMakeAPI.html#ga06f94c5d122393ad4e371f73a0803cfa
.. _Doxygen: http://www.doxygen.org/
.. _Sphinx: http://sphinx-doc.org/
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _Markdown: http://daringfireball.net/projects/markdown/
.. _Markdown Extra: http://michelf.ca/projects/php-markdown/extra/
.. _breathe: https://github.com/michaeljones/breathe
.. _doxylink: http://packages.python.org/sphinxcontrib-doxylink/
.. _`node.js http-sever`: https://npmjs.org/package/http-server
